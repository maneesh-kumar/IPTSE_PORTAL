@using IPTSE_portal.Models;
@using System.Linq;

@{
    List<IPTSE_Reg_table> reg_Table = ViewData["RegTable"] as List<IPTSE_Reg_table>;
    List<payment_details> payment_Details = ViewData["PaymentTable"] as List<payment_details>;
}

@using GridMvc.Html
@using GridMvc.Sorting
@using GridMvc.Pagination

@{
    ViewBag.Title = "Registration List";
    Layout = "~/Views/Shared/_AdminLayout.cshtml"; ;
}


@Html.AntiForgeryToken()


<div class="body-content" style="margin: 10px; border: 2px solid #ccc;padding: 8px;">

    <h2>Registration Details</h2>

    @*@Html.Grid(Model).AutoGenerateColumns().Sortable().Filterable().WithPaging(6)*@

    @helper CustomRenderingOfColumn(IPTSE_Reg_table table, List<payment_details> details)
    {
        var isPayDone = details.Count((c) => c.Id == table.Id);
        ViewData["Payment"] = isPayDone;
        if (isPayDone > 0)
        {
            <text>Yes</text>
        }
        else
        {
            <text>No</text>
        }
    }

    @functions
    {
        public int CustomValueOfColumn(IPTSE_Reg_table table, List<payment_details> details)
        {
            return details.Count((c) => c.Id == table.Id);
        }
    }

    @Html.Grid(@reg_Table).Columns(columns =>
{

    columns.Add(c => c.Id).Titled("ID")
            .Filterable(true)
            .SetWidth(20)
            .SortInitialDirection(GridSortDirection.Descending)
            .Sortable(true);

    columns.Add()
            .Titled("Payment")
            .Filterable(true)
            .SetWidth(20)
            .Sortable(true)
            .RenderValueAs(c => CustomRenderingOfColumn(c, payment_Details));

    columns.Add(c => c.first_name)
            .Titled("First Name")
            .SetWidth(100)
            .Sortable(true);

    columns.Add(c => c.last_name)
            .Titled("Last Name")
            .SetWidth(100)
            .Sortable(true);

    columns.Add(c => c.email)
            .Titled("Email")
            .SetWidth(100)
            .Sortable(true);

    columns.Add(c => c.fathername)
            .Titled("Father Name")
            .SetWidth(100)
            .Sortable(true);

    columns.Add(c => c.city)
            .Titled("City")
            .SetWidth(110)
            .Sortable(true);
    //.RenderValueAs(c => Convert.ToDateTime(c.PriceDate).ToString("d"));

    columns.Add(c => c.state)
            .Titled("State")
            .SetWidth(110)
            .Sortable(true);

    //columns.Add(c => c.frequency.Name)
    //        .Titled("Frequency")
    //        .SetWidth(110)
    //        .Sortable(true);

    //columns.Add()
    //        .Titled("")
    //        .SetWidth(10)
    //        .Filterable(true)
    //        .Sanitized(false)
    //        .Encoded(false)
    //        .RenderValueAs(c => Html.ActionLink("Edit", "Edit", "Grocery", new { id = c.ID }, null)
    //        .ToHtmlString());

    columns.Add()
            .Titled("")
            .SetWidth(10)
            .Filterable(true)
            .Sanitized(false)
            .Encoded(false)
            .RenderValueAs(c => Html.ActionLink("Details", "Details", "Admin", new { id = c.Id }, null)
            .ToHtmlString());
}).SetRowCssClasses(c => @CustomValueOfColumn(c, payment_Details) == 0 ? "warning" : string.Empty).WithPaging(10).Sortable().Filterable()


    <br />
</div>